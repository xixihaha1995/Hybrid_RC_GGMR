%% Convert RC training data to GMR/GGMR training data
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if ~isfile('data/case_arr.mat')
    T_csv=readtable('data/case_arr.csv');
    T = T_csv.';
    t_out=(T{:,1} - 32) *5/9;
    t_slabs= (T{:,6} - 32 ) * 5/9;
    t_cav = (T{:,50} - 32) * 5/ 9;
    t_water_sup = (T{:,29}-32)*5/9;
    t_water_ret = (T{:,30} - 32) *5/9;
    vfr_water = T{:,28};
    m3_per3_perCFM = 0.00047194745;
    ahu_cfm1 = T{:,42} *  m3_per3_perCFM;
    ahu_t_sup1 = (T{:,43}  - 32) * 5/9;
    ahu_cfm2 = T{:,46} * m3_per3_perCFM;
    ahu_t_sup2 = (T{:,47} - 32 ) *5/9;
    
    q_solar = T{:,75};
    q_light = T{:,81};
    q_inte_heat = T{:,79};
    
    c_water = 4.186;
    rho_water = 997e3;
    gal_per_min_to_m3 = 6.309e-5;
    y= c_water*rho_water*gal_per_min_to_m3*vfr_water.*(t_water_sup - t_water_ret);
    
    save('data/case_arr.mat','t_slabs','t_cav','t_water_sup','t_water_ret','vfr_water','q_solar',...
        'q_light','q_inte_heat','ahu_cfm1','ahu_t_sup1','ahu_cfm2','ahu_t_sup2','t_out','y');
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%





%% Flow training
load('data/case_arr_sim.mat'); %load 'Data'
t_out_norm = normalize(t_out);
t_slabs_norm = normalize(t_slabs);
t_cav_norm = normalize(t_cav);
t_water_sup_norm = normalize(t_water_sup);
t_water_ret_norm = normalize(t_water_ret);
vfr_water_norm = normalize(vfr_water);
y_norm = normalize(y);

rs_data_var_norm_all = [t_out_norm; t_slabs_norm; t_cav_norm; t_water_sup_norm;...
    t_water_ret_normy; vfr_water_norm; y_norm];

total_length = size(rs_data_var_norm_all,2);
training_length = 4032;
testing_length = total_length - training_length;
nbVarAll = size(rs_data_var_norm_all,1);
nbVarInput = nbVarAll - 1;

rs_data_var_norm_train = rs_data_var_norm_all(:,1:training_length);
rs_data_var_norm_test = rs_data_var_norm_all(:,training_length+1 :training_length+testing_length);
y_train = y(:,1:training_length);
y_test = y(:,training_length+1 :training_length+testing_length);

nbStates=20;

[rs_Priors, rs_Mu, rs_Sigma] = EM_init_kmeans(rs_data_var_norm_train, nbStates);
[rs_Priors, rs_Mu, rs_Sigma]  = EM(rs_data_var_norm_train, rs_Priors, rs_Mu, rs_Sigma);

[rs_expData_gmr_norm, rs_beta] = GMR(rs_Priors, rs_Mu, rs_Sigma, rs_data_var_norm_test(1:nbVarInput,:),[1:nbVarInput],[nbVarAll]);

%% Flow prediction
% %Flow_expData(1:f_var,:)=Flow_data_var(1:f_var,:);% all data
Flow_expData(1:f_var,:)=Flow_data_var(1:f_var,m:tn);% all data
[Flow_expData(f_all,:), flow_beta1] = GMR(Flow_Priors, Flow_Mu, Flow_Sigma, Flow_expData(1:f_var,:),[1:f_var],[f_all]);
ntest_flow = Flow_expData(f_all,:); %normalized evolved flow from the evolving gmr model

rs_expData_gmr = rs_expData_gmr_norm * std(y_train)+ mean(y_train);
Predicted_Flow = (Flow_expData(f_all,:))*std(Flow)+mean(Flow);

R_sq_flow_be = 1-sum((Predicted_Flow-Flow(m:tn)).^2)/sum((Predicted_Flow-mean(Flow(m:tn))).^2);
CVrmse_flow_be=sqrt(sum((Predicted_Flow-Flow(m:tn)).^2)/size(Flow(m:tn),2))/mean(Flow(m:tn));
NMBE_flow_be=sum(Predicted_Flow-Flow(m:tn))/size(Flow(m:tn),2)/mean(Flow(m:tn));
% R_sq_flow_be
% CVrmse_flow_be
% NMBE_flow_be
% 
sum_beta_flow=sum(flow_beta1,1);
% 
 %% flow evolving
[Flow_Priors, Flow_Mu, Flow_Sigma, flow_expData] = Evolving_LW_2(Flow_Priors, Flow_Mu, Flow_Sigma, Flow_data_var(m:tn),sum_beta_flow);
nevolved_flow = flow_expData.'; %normalixed evolved flow from the evolving gmr model
evolve_Predicted_Flow = flow_expData*std(Flow)+mean(Flow); %Actual predicted flow after denormalization

R_sq_flow_ae = 1-sum((evolve_Predicted_Flow-Flow(m:tn)').^2)/sum((evolve_Predicted_Flow-mean(Flow(m:tn))).^2);
CVrmse_flow_ae=sqrt(sum((evolve_Predicted_Flow-Flow(m:tn)').^2)/size(Flow(m:tn),2))/mean(Flow(m:tn));
NMBE_flow_ae=sum(evolve_Predicted_Flow-Flow(m:tn)')/size(Flow(m:tn),2)/mean(Flow(m:tn));
R_sq_flow_ae
CVrmse_flow_ae
NMBE_flow_ae